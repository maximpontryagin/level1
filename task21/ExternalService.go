package task21

import "fmt"

/*
Реализовать паттерн «адаптер» на любом примере.
-----------------------------------------------------------------
Пример: У нас в компании используют json, но есть необходимость использовать
внешний пакет который отправляет данные в формате XML.

Этот паттерн используется, когда в новом проекте разработчики хотят повторно использовать уже существующий код.
Например, имеющиеся классы могут обладать нужной функциональностью и иметь при этом несовместимые интерфейсы.

Суть работы паттерна заключается в следующем: если у вас есть класс и его интерфейс не совместим с кодом вашей
системы, то для разрешения этого конфликта вы не изменяете код этого класса, а пишете для него адаптер.
Другими словами, Adapter адаптирует существующий код к требуемому интерфейсу (является переходником).

Эта реализация позволяет использовать объекты типа JsonDocument в системе,
которая работает с интерфейсом ExternalService, не изменяя исходный код JsonDocument.
*/

// Внешний сервис
type ExternalService interface {
	// Метод отправки данных в формате xml
	SendXmlData()
}

// XmlDocument реализует интерфейс ExternalService
type XmlDocument struct {
}

func (doc XmlDocument) SendXmlData() {
	fmt.Println("Отправка xml документа")
}
