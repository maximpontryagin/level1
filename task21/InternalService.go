package task21

import "fmt"

/*
Реализовать паттерн «адаптер» на любом примере.
-----------------------------------------------------------------
Пример: У нас в компании используют json, но есть необходимость использовать
внешний пакет который отправляет данные в формате XML.

Этот паттерн используется, когда в новом проекте разработчики хотят повторно использовать уже существующий код.
Например, имеющиеся классы могут обладать нужной функциональностью и иметь при этом несовместимые интерфейсы.

Суть работы паттерна заключается в следующем: если у вас есть класс и его интерфейс не совместим с кодом вашей
системы, то для разрешения этого конфликта вы не изменяете код этого класса, а пишете для него адаптер.
Другими словами, Adapter адаптирует существующий код к требуемому интерфейсу (является переходником).

Эта реализация позволяет использовать объекты типа JsonDocument в системе,
которая работает с интерфейсом ExternalService, не изменяя исходный код JsonDocument.
*/

// Наша внутрнеяя структура Json документа
type JsonDocument struct {
}

func (doc JsonDocument) ConvertToXml() string {
	return "<xml></xml>"
}

// Создаем наш адаптер который "наследует" наш json документ
// JsonDocumentAdapter - адаптер, позволяющий JsonDocument работать с ExternalService
type JsonDocumentAdapter struct {
	JsonDocument *JsonDocument
}

// Реализуем интерфейс внешнего сервиса через адаптер для нашего json
func (adapter JsonDocumentAdapter) SendXmlData() {
	data := adapter.JsonDocument.ConvertToXml()
	fmt.Println("Отправка xml данных :", data)
}
