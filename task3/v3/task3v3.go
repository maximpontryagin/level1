package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

/*
Дана последовательность чисел: 2,4,6,8,10. Найти сумму их
квадратов(2^2+3^2+4^2….) с использованием конкурентных вычислений.

-------------------------------------------------------------------
Используем атомики. По моему мнению, это решение будет самым эффективным,
поскольку атомики работают на уровне железа, благодаря чему они работают очень
быстро. Так же исключают data race.
*/

func main() {
	var wg sync.WaitGroup
	// Переменная для накопления суммы
	var sum int32
	// Массив последовательности чисел из дано
	mas := [5]int32{2, 4, 6, 8, 10}
	for _, val := range mas {
		// Перед запуском горутины увеличиваем счетчик ожидания на 1
		wg.Add(1)
		go func(val int32) {
			// Указываем, что после выполнения горутины счетчик уменьшается на 1
			defer wg.Done()
			// Увеличиваем значение sum используя atomic
			atomic.AddInt32(&sum, val*val)
		}(val) // Вызов горутины с переменной val
	}

	// Wait() дожидается выполнени я всех горутин по счетчику
	wg.Wait()
	fmt.Println(sum) // sum = 220
}
