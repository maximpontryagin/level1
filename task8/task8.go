package main

import "fmt"

/*
Дана переменная int64. Разработать программу которая устанавливает i-й бит в 1 или 0.
-----------------------------------------------------------------
Оператор побитового сдвига <<: Этот оператор выполняет побитовый сдвиг влево на указанное количество позиций.
В данном случае 1 << i создает число, у которого установлен только i-й бит.
Например, если i равно 3, то 1 << 3 даст 00001000 в двоичной системе (или 8 в десятичной).

Оператор побитового ИЛИ |:Этот оператор применяет побитовое ИЛИ между двумя числами.
Когда мы используем его для num | (1 << i), он устанавливает i-й бит в num в 1, если этот бит в маске (1 << i) также равен 1.
В результате получается число, у которого i-й бит установлен в 1, а остальные биты сохраняются такими же, как в num.

Оператор побитового AND NOT &^: Этот оператор применяет побитовое И между num и инвертированной маской (1 << i).
Инвертированная маска (1 << i) создает число, у которого все биты, кроме i-го, установлены в 1, а i-й бит установлен в 0.
Побитовое И & с инвертированной маской приводит к установке i-го бита в 0 в числе num, а остальные биты сохраняются без изменений.
*/

// setBit устанавливает i-й бит в 1
func setBit(num int64, i uint) int64 {
	return num | (1 << i)
}

// clearBit устанавливает i-й бит в 0
func clearBit(num int64, i uint) int64 {
	return num &^ (1 << i)
}

func main() {
	var num int64 = 0        // начальное значение
	var bitPosition uint = 3 // позиция бита (считаем с нуля)

	// Устанавливаем i-й бит в 1
	num = setBit(num, bitPosition)
	fmt.Printf("После установки iого бита в 1. i=%d: %d\n", bitPosition, num)

	// Устанавливаем i-й бит в 0
	num = clearBit(num, bitPosition)
	fmt.Printf("После установки iого бита в 0. i=%d: %d\n", bitPosition, num)
}
