package main

import "fmt"

/*
Реализовать быструю сортировку массива (quicksort) встроенными методами
языка.
-----------------------------------------------------------------
*/

// quickSort - основная функция, которая реализует быструю сортировку
func quickSort(arr []int, low, high int) {
	if low < high {
		// pi - индекс раздела, arr[pi] теперь находится на правильном месте
		// вызвваем рекурсивно до разделения и после.
		pi := partition(arr, low, high)

		// Отдельно сортируем элементы до раздела и после раздела
		quickSort(arr, low, pi-1)
		quickSort(arr, pi+1, high)
	}
}

// partition выбирает последний элемент как опорный, размещает опорный элемент на его правильное место
// в отсортированном массиве и размещает все меньшие (меньше опорного) слева от него, а все большие - справа от него
func partition(arr []int, low, high int) int {
	pivot := arr[high] // опорный элемент
	i := low - 1       // Индекс меньшего элемента, указывает на правильное место для опорного элемента

	for j := low; j <= high-1; j++ {
		// Если текущий элемент меньше опорного
		if arr[j] < pivot {
			i++ // увеличиваем индекс меньшего элемента
			arr[i], arr[j] = arr[j], arr[i]
		}
	}
	arr[i+1], arr[high] = arr[high], arr[i+1]
	return i + 1
}

func main() {
	array := []int{-1, -3, 4, 9, 0, -7, 9, 6, 5, 6, 1}
	begin := 0            // Индекс крайне левого элемента
	end := len(array) - 1 // Индекс крайне правого элемента
	quickSort(array, begin, end)
	fmt.Printf("Отсортированный массив: %v\n", array)
}
