package main

import "fmt"

/*
Поменять местами два числа без создания временной переменной.
-----------------------------------------------------------------
Побитовая операция XOR (исключающее ИЛИ) — это логическая операция,
которая работает по следующему правилу: если два соответствующих бита одинаковы,
результат будет 0, если разные — результат будет 1.

Пусть a = 5 и b = 10.
В двоичной системе это:
a = 5 -> 0101
b = 10 -> 1010

Шаг 1: a = a ^ b
Первое выражение выполняет XOR между a и b, и результат сохраняется в a:
a = a ^ b
a = 0101 ^ 1010
a = 1111 (в десятичной системе это 15)
Теперь a = 15 и b = 10.

Шаг 2: b = a ^ b
Следующее выражение выполняет XOR между новым значением a и b, и результат сохраняется в b:
b = a ^ b
b = 1111 ^ 1010
b = 0101 (в десятичной системе это 5)
Теперь a = 15 и b = 5.

Шаг 3: a = a ^ b
Последнее выражение выполняет XOR между новым значением a и новым значением b, и результат сохраняется в a:
a = a ^ b
a = 1111 ^ 0101
a = 1010 (в десятичной системе это 10)
Теперь a = 10 и b = 5.
*/

func main() {
	a := 5
	b := 10

	fmt.Printf("Было a = %d, b = %d\n", a, b)
	a = a ^ b // a теперь 15 (5 XOR 10)
	b = a ^ b // b теперь 5 (15 XOR 10)
	a = a ^ b // a теперь 10 (15 XOR 5)

	fmt.Printf("Стало a = %d, b = %d\n", a, b)
}
